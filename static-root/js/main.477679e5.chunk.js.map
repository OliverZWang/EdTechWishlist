{"version":3,"sources":["logo.svg","lookup/components.js","ideas/components.js","App.js","reportWebVitals.js","index.js"],"names":["lookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","open","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","setRequestHeader","onload","response","status","onerror","e","console","log","send","IdeasComponent","props","textAreaRef","React","createRef","useState","newIdeas","setNewIdeas","className","onSubmit","event","preventDefault","newValue","current","value","tempNewIdeas","unshift","content","id","ref","required","type","IdeasList","ideasInit","setIdeasInit","ideas","setIdeas","ideasDidSet","setIdeasDidSet","useEffect","final","concat","alert","map","item","index","Idea","idea","ActionButton","action","actionDisplay","display","onClick","user","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appElement","getElementById","ReactDOM","render","StrictMode","ideasElement"],"mappings":"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","file":"static/js/main.477679e5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","\nfunction getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\n\nfunction lookup(method, endpoint, callback, data){\n    let jsonData ;\n    if(data){\n        jsonData = JSON.stringify(data)\n    }\n    const xhr = new XMLHttpRequest()\n    // const method = 'GET'\n    const url = `http://localhost:8000${endpoint}`\n    xhr.responseType = 'json'\n    xhr.open(method, url)\n    const csrftoken = getCookie('csrftoken');\n    // xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n    // alert(\"token is\" + csrftoken)\n    if(csrftoken){\n        // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n        // xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n    }\n    \n    xhr.onload = function(){\n        // console.log(\"Response is\"+xhr.response['response'])\n        if(endpoint === \"/ideas/list/\"){\n            callback(xhr.response, xhr.status)\n        }\n        else if(endpoint === \"/ideas/create/\"){\n            callback(xhr.response, xhr.status)\n        }\n        \n\n    }\n    xhr.onerror = function(e){\n        console.log(e)\n        callback({\"message\": \"The request was an error\"}, 400)\n    }\n    xhr.send(jsonData)\n}\n\nexport function createIdea(newIdea, callback){\n    lookup(\"POST\", \"/ideas/create/\", callback, {content: newIdea})\n}\n\n\nexport function loadIdeas(callback){\n    lookup(\"GET\", \"/ideas/list/\", callback)\n    // const xhr = new XMLHttpRequest()\n    // const method = 'GET'\n    // const url = 'http://localhost:8000/ideas/list/'\n    // const responseType = 'json'\n    // xhr.responseType = responseType\n    // xhr.open(method, url)\n    // xhr.onload = function(){\n    //     // console.log(\"Response is\"+xhr.response['response'])\n    //     callback(xhr.response[\"response\"], xhr.status)\n\n    // }\n    // xhr.onerror = function(e){\n    //     console.log(e)\n    //     callback({\"message\": \"The request was an error\"}, 400)\n    // }\n    // xhr.send()\n\n}","import React, {useEffect, useState} from 'react'\n// useEffect: run HTTP request, do a lookup on server\n\nimport {createIdea, loadIdeas} from '../lookup'\n\nexport function IdeasComponent(props){\n\n    const textAreaRef = React.createRef()\n    const [newIdea, setNewIdea] = useState([])\n    // newIdeas is the actual variable to use for the state\n    // \n    const [newIdeas, setNewIdeas] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newValue = textAreaRef.current.value\n        \n        // copy the array newIdeas\n        let tempNewIdeas = [... newIdeas]\n\n        // put the new idea at the beginning of the array\n        tempNewIdeas.unshift({\n            content: newValue,\n            id: 12345\n        })\n        setNewIdeas(tempNewIdeas)\n        textAreaRef.current.value = ''\n        // createIdea(newValue, (response, status)=>{\n        //     if(status === 201){\n        //         console.log(\"New Idea Created\")\n        //     }\n        //     else{\n        //         console.log(response)\n        //         console.log(\"An error has occurred\")\n        //     }\n        // })\n        // let tempNewIdeas = [...newIdeas]\n        //unshift put the new idea on top\n        //TO DO: Change this to a server side call\n        // tempNewIdeas.unshift({\n        //     content: newValue, \n        //     id: 123\n        // })\n        // setNewIdeas(newValue)\n        textAreaRef.current.value = ''\n    }\n\n    return <div className={props.className}>\n        <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n                <textarea ref={textAreaRef} required={true} className='form-control' name='idea'>\n\n                </textarea>\n                <button type='submit' className='btn btn-primary my-3'>Post Idea</button>\n            </form>\n        </div>\n        <IdeasList newIdeas={newIdeas}/>\n    </div> \n}\n\nexport function IdeasList(props){\n    // console.log(props.newIdeas)\n    const [ideasInit, setIdeasInit] = useState([])\n\n\n    const [ideas, setIdeas] = useState([])\n    const [ideasDidSet, setIdeasDidSet] = useState(false)\n    // setIdeasInit([...props.newIdeas].concat(ideasInit))\n\n    useEffect(()=>{\n        console.log(\"This is called\")\n        // console.log(\"what is ideaInit? \" + ideasInit)\n        const final = [...props.newIdeas].concat(ideasInit)\n        if (final.length !== ideas.length){\n            setIdeas(final)\n        }\n        \n    }, [props.newIdeas, ideas, ideasInit])\n    \n    useEffect(() => {\n        if (ideasDidSet === false){\n\n            const myCallback = (response, status) => {\n                //   console.log(response, status)\n                if (status === 200){\n                    // const finalIdeasInit = [...response].concat(ideasInit)\n                    // alert(response)\n                    setIdeasInit(response)\n                    setIdeasDidSet(true)\n                } else {\n                    alert(\"There was an error\")\n                }\n            }\n            loadIdeas(myCallback)\n        }\n      }, [ideasInit, ideasDidSet, setIdeasDidSet])\n    //   console.log(\"ideas is\" + ideas)\n      return ideas.map((item, index)=>{\n        return <Idea idea={item} className='my-5 py-5 border' key={`${index}-{item.id}`}/>\n    })\n}\n\nexport function ActionButton(props){\n    const {idea, action} = props\n    // const [justClicked, setJustClicked] = useState(1)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const handleClick = (event) =>{\n        event.preventDefault()\n        if (action.type === 'delete'){\n            console.log(\"Trying to delete the idea\")\n            \n            // setJustClicked(justClicked+1)\n            \n        }\n    }\nreturn <button className={className} onClick={handleClick} >{actionDisplay} </button>\n}\n\nexport function Idea(props){\n    const {idea} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n        <p>{idea.id} - {idea.content} - {idea.user}</p>\n        <div>\n            <ActionButton idea={idea} action={{type: \"delete\", display: \"Delete\"}} />\n            <br/>\n            <ActionButton idea={idea} action={{type: \"comment\", display: \"Comment\"}} />\n        </div>\n    </div>\n}","// useEffect allows us to run HTTP request\nimport React from 'react'; \nimport logo from './logo.svg';\nimport './App.css';\n\nimport {IdeasComponent} from './ideas'\n\nfunction App() {\n    \n \n    \n//   [] is where the dependencies go\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n            <IdeasComponent/>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {IdeasComponent} from './ideas'\n\n\nconst appElement = document.getElementById(\"root\")\nif(appElement){\n    ReactDOM.render(\n        <React.StrictMode>\n          <App />\n        </React.StrictMode>,\n        appElement\n      );\n}\n\nconst ideasElement = document.getElementById(\"edtech-wishlist\")\nif(ideasElement){  \n    ReactDOM.render(\n        <React.StrictMode>\n          <IdeasComponent />\n        </React.StrictMode>,\n        ideasElement\n      );\n}\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}